buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.android.application"
//    id "io.sentry.android.gradle" version "3.12.0"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

//import io.sentry.android.gradle.extensions.InstrumentationFeature
//import io.sentry.android.gradle.instrumentation.logcat.LogcatLevel
//
//sentry {
//    // Disables or enables the automatic configuration of Native Symbols
//    // for Sentry. This executes sentry-cli automatically so
//    // you don't need to do it manually.
//    // Default is disabled.
//    uploadNativeSymbols = true
//
//    // Whether the plugin should attempt to auto-upload the native debug symbols to Sentry or not.
//    // If disabled the plugin will run a dry-run.
//    // Default is enabled.
//    autoUploadNativeSymbols = true
//
//    // Does or doesn't include the source code of native code for Sentry.
//    // This executes sentry-cli with the --include-sources param. automatically so
//    // you don't need to do it manually.
//    // This option has an effect only when [uploadNativeSymbols] is enabled.
//    // Default is disabled.
//    includeNativeSources = false
//
//    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
//    // This enables source context, allowing you to see your source
//    // code as part of your stack traces in Sentry.
//    includeSourceContext = false
//
//    // Enable or disable the tracing instrumentation.
//    // Does auto instrumentation for specified features through bytecode manipulation.
//    // Default is enabled.
//    tracingInstrumentation {
//        enabled = true
//
//        // Specifies a set of instrumentation features that are eligible for bytecode manipulation.
//        // Defaults to all available values of InstrumentationFeature enum class.
//        features = [InstrumentationFeature.DATABASE, InstrumentationFeature.FILE_IO, InstrumentationFeature.OKHTTP, InstrumentationFeature.COMPOSE]
//
//        // Enable or disable logcat instrumentation through bytecode manipulation.
//        // Default is enabled.
//        logcat {
//            enabled = true
//
//            // Specifies a minimum log level for the logcat breadcrumb logging.
//            // Defaults to LogcatLevel.WARNING.
//            minLevel = LogcatLevel.WARNING
//        }
//    }
//
//    // Enable auto-installation of Sentry components (sentry-android SDK and okhttp, timber and fragment integrations).
//    // Default is enabled.
//    // Only available v3.1.0 and above.
//    autoInstallation {
//        enabled = true
//
//        // Specifies a version of the sentry-android SDK and fragment, timber and okhttp integrations.
//        //
//        // This is also useful, when you have the sentry-android SDK already included into a transitive dependency/module and want to
//        // align integration versions with it (if it's a direct dependency, the version will be inferred).
//        //
//        // NOTE: if you have a higher version of the sentry-android SDK or integrations on the classpath, this setting will have no effect
//        // as Gradle will resolve it to the latest version.
//        //
//        // Defaults to the latest published Sentry version.
//        sentryVersion = '6.28.0'
//    }
//
//    ignoredBuildTypes = ["debug"]
//    ignoredFlavors = ["development", "staging"]
//}

android {
    namespace "com.theprojectfactory.civstart"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.theprojectfactory.civstart"
        minSdkVersion 24
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        if (System.getenv("ANDROID_KEYSTORE_PATH")) {
            release {
                storeFile file(System.getenv("ANDROID_KEYSTORE_PATH"))
                keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
                keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            }
        } else {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    flavorDimensions "default"
    productFlavors { 
        production {
            dimension "default"
            applicationIdSuffix ""
            manifestPlaceholders = [appName: "CivStart"]
        }
        staging {
            dimension "default"
            applicationIdSuffix ".stg"
            manifestPlaceholders = [appName: "[STG] CivStart"]
        }
        development {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appName: "[DEV] CivStart"]
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
